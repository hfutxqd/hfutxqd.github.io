<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法与ACM on imxqd.xyz</title>
    <link>https://imxqd.xyz/categories/%E7%AE%97%E6%B3%95%E4%B8%8Eacm/</link>
    <description>Recent content in 算法与ACM on imxqd.xyz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 15 Nov 2014 13:46:37 +0000</lastBuildDate>
    
	<atom:link href="https://imxqd.xyz/categories/%E7%AE%97%E6%B3%95%E4%B8%8Eacm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>自己设计实现文件压缩及解压程序</title>
      <link>https://imxqd.xyz/index.php/2014/11/15/%E8%87%AA%E5%B7%B1%E8%AE%BE%E8%AE%A1%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9%E5%8F%8A%E8%A7%A3%E5%8E%8B%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sat, 15 Nov 2014 13:46:37 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2014/11/15/%E8%87%AA%E5%B7%B1%E8%AE%BE%E8%AE%A1%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9%E5%8F%8A%E8%A7%A3%E5%8E%8B%E7%A8%8B%E5%BA%8F/</guid>
      <description>任务定义和问题分析 此问题分为五个过程：
 文件的读取和字符的统计。
  这个是最简单的过程，读取文件，统计每个字符的出现次数。把这些数据统计在高度为1的二叉树中，每一个字符占用一棵树。这些所有树的集合构成一个树的列表（指针）。
   哈夫曼树的创建。
  哈夫曼树的创建也是比较简单的，因为在我们学习哈夫曼树定义的时候，就已经给出了哈夫曼树的创建过程，只要按照其过程就能比较好地创建出哈夫曼树了。
 &amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;span style=&amp;quot;font-size: 10pt;&amp;quot;&amp;gt;具体过程为：&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;span style=&amp;quot;font-size: 10pt;&amp;quot;&amp;gt;每次从已有的字符树列表中找出权值最小的两个二叉树，&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;span style=&amp;quot;font-size: 10pt;&amp;quot;&amp;gt;把它们权值相加产生一个新的高度为1的二叉树，&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;span style=&amp;quot;font-size: 10pt;&amp;quot;&amp;gt;把新二叉树的左孩子指向之前找到的权值最小的字符所在的二叉树，右孩子指向第二小的二叉树，&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;span style=&amp;quot;font-size: 10pt;&amp;quot;&amp;gt;然后把新产生的二叉树加入到字符树列表中，&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;span style=&amp;quot;font-size: 10pt;&amp;quot;&amp;gt;最后从字符树列表中删除之前找到的权值最小的两棵二叉树（指针）。&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;span style=&amp;quot;font-size: 10pt;&amp;quot;&amp;gt;反复循环，直到字符树列表中只剩下一棵二叉树。&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;span style=&amp;quot;font-size: 10pt;&amp;quot;&amp;gt;到此，哈夫曼树的创建完成。&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;div style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;span style=&amp;quot;font-size: 10pt;&amp;quot;&amp;gt;哈夫曼编码。&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;span style=&amp;quot;font-size: 10pt;&amp;quot;&amp;gt;哈夫曼树创建完成后，哈夫曼编码也就很简单了。从树根开始，向左记为0，向右记为1,。这里涉及到之前所做过的实验──从根节点到叶子节点的路径。方法基本类似，通过遍历可以很方便地实现。&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;div style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;span style=&amp;quot;font-size: 10pt;&amp;quot;&amp;gt;文件压缩后的写入文件的方式。&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;span style=&amp;quot;font-size: 10pt;&amp;quot;&amp;gt;经过哈夫曼编码的压缩后，一个字符可能由不到8位甚至只有1位的空间来存储。但是，目前大部分语言都没有以位为单位的数据类型。为了解决这个问题，我们需要把二进制字符串按一定长度切割并且转换为标准类型。我采用的是把二进制字符串以32字符的长度进行切割，并把它转换为unsigned long类型，最后如果不足32位，在前面补0然后再转为unsigned long类型。&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;span style=&amp;quot;font-size: 10pt;&amp;quot;&amp;gt;文件要想能够解压，就必须要把哈夫曼编码表保存到文件，而且每个字符+编码的长度都要固定。&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;span style=&amp;quot;font-size: 10pt;&amp;quot;&amp;gt;开始，我是采用的char + char[]的方式，发现这样比较浪费空间，如果要完全压缩二进制文件，char[]的长度可能需要256，耗费256 + 1个字节（256个char + 1个char），所以是相当废空间。&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;span style=&amp;quot;font-size: 10pt;&amp;quot;&amp;gt;于是，我又想了一种相对更好的方法，就是把哈夫曼编码同样转换为unsigned long[]，采用char + unsigned long[] + char的方式。后一个char是用来记录哈夫曼编码的长度，便于哈夫曼编码的再读取。这样，只消耗了32+2个字节（8个unsigned long + 2个char）。&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;div style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;span style=&amp;quot;font-size: 10pt;&amp;quot;&amp;gt;解压文件。&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt; &amp;lt;span style=&amp;quot;font-size: 10pt;&amp;quot;&amp;gt;只要先读取哈夫曼编码表，再读取文件内容，把文件内容转换为二进制字符串，再遍历二进制字符串，在哈夫曼编码表中寻找，逐个替换，再写入文件即可。&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt; &amp;lt;h3&amp;gt; &amp;lt;span style=&amp;quot;font-size: 12pt;&amp;quot;&amp;gt;数据结构的选择和概要设计&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/h3&amp;gt; &amp;lt;p&amp;gt; 为了方便哈夫曼树的创建和哈夫曼编码，特别设计二叉树结构为 &amp;lt;/p&amp;gt; &amp;lt;div&amp;gt; &amp;lt;table style=&amp;quot;border-collapse: collapse;&amp;quot; border=&amp;quot;0&amp;quot;&amp;gt; &amp;lt;colgroup&amp;gt; &amp;lt;col style=&amp;quot;width: 691px;&amp;quot; /&amp;gt;&amp;lt;/colgroup&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td style=&amp;quot;padding-left: 9px; padding-right: 9px; border: solid 0.</description>
    </item>
    
    <item>
      <title>hdoj1009解题报告</title>
      <link>https://imxqd.xyz/index.php/2014/01/25/hdoj1009%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Sat, 25 Jan 2014 06:08:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2014/01/25/hdoj1009%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>Problem Description  FatMouse prepared M pounds of cat food, ready to trade with the cats guarding the warehouse containing his favorite food, JavaBean.
The warehouse has N rooms. The i-th room contains J[i] pounds of JavaBeans and requires F[i] pounds of cat food. FatMouse does not have to trade for all the JavaBeans in the room, instead, he may get J[i]* a% pounds of JavaBeans if he pays F[i]* a% pounds of</description>
    </item>
    
    <item>
      <title>hdoj2012解题报告</title>
      <link>https://imxqd.xyz/index.php/2014/01/25/hdoj2012%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Sat, 25 Jan 2014 05:55:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2014/01/25/hdoj2012%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>Problem Description  对于表达式n^2&amp;#43;n&amp;#43;41，当n在（x,y）范围内取整数&amp;#20540;时（包括x,y）(-39&amp;nbsp;  Input  输入数据有多组，每组占一行，由两个整数x，y组成，当x=0,y=0时，表示输入结束，该行不做处理。  &amp;nbsp;  Output  对于每个给定范围内的取&amp;#20540;，如果表达式的&amp;#20540;都为素数，则输出&#34;OK&#34;,否则请输出“Sorry”,每组输出占一行。  &amp;nbsp;   #include  bool isprime(int n) { for (int i = 2; i  </description>
    </item>
    
    <item>
      <title>hdoj2011解题报告</title>
      <link>https://imxqd.xyz/index.php/2014/01/25/hdoj2011%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Sat, 25 Jan 2014 05:34:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2014/01/25/hdoj2011%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>Problem Description  多项式的描述如下：
1 &amp;#8211; 1/2 &amp;#43; 1/3 &amp;#8211; 1/4 &amp;#43; 1/5 &amp;#8211; 1/6 &amp;#43; &amp;#8230;
现在请你求出该多项式的前n项的和。  &amp;nbsp;  Input  输入数据由2行组成，首先是一个正整数m（m&amp;nbsp;  Output  对于每个测试实例n，要求输出多项式前n项的和。每个测试实例的输出占一行，结果保留2位小数。  &amp;nbsp;   #include  int main() { int m; scanf(&#34;%d&#34;, &amp;m); while (m--) { int n; scanf(&#34;%d&#34;, &amp;n); double res = 0; int tmp = -1; for (int i = 1; i  </description>
    </item>
    
    <item>
      <title>hdoj2010解题报告</title>
      <link>https://imxqd.xyz/index.php/2014/01/25/hdoj2010%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Sat, 25 Jan 2014 05:21:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2014/01/25/hdoj2010%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>Problem Description  春天是鲜花的季节，水仙花就是其中最迷人的代表，数学上有个水仙花数，他是这样定义的：
“水仙花数”是指一个三位数，它的各位数字的立方和等于其本身，比如：153=1^3&amp;#43;5^3&amp;#43;3^3。
现在要求输出所有在m和n范围内的水仙花数。  &amp;nbsp;  Input  输入数据有多组，每组占一行，包括两个整数m和n（100&amp;nbsp;  Output  对于每个测试实例，要求输出所有在给定范围内的水仙花数，就是说，输出的水仙花数必须大于等于m,并且小于等于n，如果有多个，则要求从小到大排列在一行内输出，之间用一个空&amp;#26684;隔开;
如果给定的范围内不存在水仙花数，则输出no;
每个测试实例的输出占一行。  &amp;nbsp;   #include  bool issxh(int n) { int sum = 0; int m = n; while (n  0) { int tmp = n % 10; sum += tmp * tmp * tmp; n /= 10; } return (sum == m); } int main() { int x, y; while (scanf(&#34;</description>
    </item>
    
    <item>
      <title>hdoj2009解题报告</title>
      <link>https://imxqd.xyz/index.php/2014/01/21/hdoj2009%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Tue, 21 Jan 2014 05:42:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2014/01/21/hdoj2009%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>Problem Description  数列的定义如下：
数列的第一项为n，以后各项为前一项的平方根，求数列的前m项的和。  &amp;nbsp;  Input  输入数据有多组，每组占一行，由两个整数n（n&amp;nbsp;  Output  对于每组输入数据，输出该数列的和，每个测试实例占一行，要求精度保留2位小数。  &amp;nbsp;   #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cmath&amp;gt; intmain() {int n, m;while(scanf(&#34;%d %d&#34;, &amp;n, &amp;m) != EOF) {double res=0;double x= n;for(int i=0; i&amp;lt; m; i&amp;#43;&amp;#43;) { res&amp;#43;= x; x= sqrt(x); } printf(&#34;%.2lfn&#34;, res); }return0; }   </description>
    </item>
    
    <item>
      <title>hdoj2008解题报告</title>
      <link>https://imxqd.xyz/index.php/2014/01/21/hdoj2008%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Tue, 21 Jan 2014 05:40:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2014/01/21/hdoj2008%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>Problem Description  统计给定的n个数中，负数、零和正数的个数。  &amp;nbsp;  Input  输入数据有多组，每组占一行，每行的第一个数是整数n（n&amp;nbsp;  Output  对于每组输入数据，输出一行a,b和c，分别表示给定的数据中负数、零和正数的个数。  &amp;nbsp;   #include  #include  int main() { int n, m; while (scanf(&#34;%d %d&#34;, &amp;n, &amp;m) != EOF) { double res = 0; double x = n; for (int i = 0; i  </description>
    </item>
    
    <item>
      <title>hdoj2007解题报告</title>
      <link>https://imxqd.xyz/index.php/2014/01/21/hdoj2007%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Tue, 21 Jan 2014 05:38:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2014/01/21/hdoj2007%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>Problem Description  给定一段连续的整数，求出他们中所有偶数的平方和以及所有奇数的立方和。  &amp;nbsp;  Input  输入数据包含多组测试实例，每组测试实例包含一行，由两个整数m和n组成。  &amp;nbsp;  Output  对于每组输入数据，输出一行，应包括两个整数x和y，分别表示该段连续的整数中所有偶数的平方和以及所有奇数的立方和。
你可以认为32位整数足以保存结果。  &amp;nbsp;   #include  int main() { while (true) { int n; scanf(&#34;%d&#34;, &amp;n); if (n == 0)break; int z = 0, f = 0, l = 0; for (int i = 0; i 0) z++; else if (x  </description>
    </item>
    
    <item>
      <title>hdoj2006解题报告</title>
      <link>https://imxqd.xyz/index.php/2014/01/18/hdoj2006%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Sat, 18 Jan 2014 06:27:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2014/01/18/hdoj2006%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>Problem Description  给你n个整数，求他们中所有奇数的乘积。  &amp;nbsp;  Input  输入数据包含多个测试实例，每个测试实例占一行，每行的第一个数为n，表示本组数据一共有n个，接着是n个整数，你可以假设每组数据必定至少存在一个奇数。  &amp;nbsp;  Output  输出每组数中的所有奇数的乘积，对于测试实例，输出一行。  &amp;nbsp;   废话不说,上代码:   #include  int main() { int n; while (scanf(&#34;%d&#34;, &amp;n) != EOF) { int res = 1; for (int i = 0; i  </description>
    </item>
    
    <item>
      <title>hdoj2005解题报告</title>
      <link>https://imxqd.xyz/index.php/2014/01/18/hdoj2005%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Sat, 18 Jan 2014 06:25:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2014/01/18/hdoj2005%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>Problem Description  给定一个日期，输出这个日期是该年的第几天。  &amp;nbsp;  Input  输入数据有多组，每组占一行，数据&amp;#26684;式为YYYY/MM/DD组成，具体参见sample input ,另外，可以向你确保所有的输入数据是合法的。  &amp;nbsp;  Output  对于每组输入数据，输出一行，表示该日期是该年的第几天。  &amp;nbsp;   首先要知道该年是不是闰年,然后再计算   代码:   #include  int main() { int y, m, d; while (scanf(&#34;%d/%d/%d&#34;, &amp;y, &amp;m, &amp;d) != EOF) { int day[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; if ((y % 4 == 0 &amp;&amp; y % 100 !</description>
    </item>
    
    <item>
      <title>hdoj2004解题报告</title>
      <link>https://imxqd.xyz/index.php/2014/01/18/hdoj2004%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Sat, 18 Jan 2014 06:23:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2014/01/18/hdoj2004%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>Problem Description  输入一个百分制的成绩t，将其转换成对应的等级，具体转换规则如下：
90~100为A;
80~89为B;
70~79为C;
60~69为D;
0~59为E;  &amp;nbsp;  Input  输入数据有多组，每组占一行，由一个整数组成。  &amp;nbsp;  Output  对于每组输入数据，输出一行。如果输入数据不在0~100范围内，请输出一行：“Score is error!”。  &amp;nbsp;   #include 
int main()
{
&amp;nbsp; &amp;nbsp; int x;
&amp;nbsp; &amp;nbsp; while (scanf(&#34;%d&#34;, &amp;x) != EOF)
&amp;nbsp; &amp;nbsp; {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (x = 0 &amp;&amp; x = 60 &amp;&amp; x = 70 &amp;&amp; x = 80 &amp;&amp; x = 90 &amp;&amp; x return 0;</description>
    </item>
    
    <item>
      <title>hdoj2003解题报告</title>
      <link>https://imxqd.xyz/index.php/2014/01/18/hdoj2003%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Sat, 18 Jan 2014 06:22:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2014/01/18/hdoj2003%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>Problem Description  求实数的绝对&amp;#20540;。  &amp;nbsp;  Input  输入数据有多组，每组占一行，每行包含一个实数。  &amp;nbsp;  Output  对于每组输入数据，输出它的绝对&amp;#20540;，要求每组数据输出一行，结果保留两位小数。  &amp;nbsp;   #include 
int main()
{
&amp;nbsp; &amp;nbsp; double x;
&amp;nbsp; &amp;nbsp; while (scanf(&#34;%lf&#34;, &amp;x) != EOF)
&amp;nbsp; &amp;nbsp; {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; x = x  0 ? x : -x;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf(&#34;%.2lfn&#34;, x);
 &amp;nbsp; &amp;nbsp; }
return 0;
}  </description>
    </item>
    
    <item>
      <title>嘿嘿,碰到了坑爹的题</title>
      <link>https://imxqd.xyz/index.php/2014/01/15/%E5%98%BF%E5%98%BF%E7%A2%B0%E5%88%B0%E4%BA%86%E5%9D%91%E7%88%B9%E7%9A%84%E9%A2%98/</link>
      <pubDate>Wed, 15 Jan 2014 05:01:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2014/01/15/%E5%98%BF%E5%98%BF%E7%A2%B0%E5%88%B0%E4%BA%86%E5%9D%91%E7%88%B9%E7%9A%84%E9%A2%98/</guid>
      <description>Problem Description  Give you two numbers A and B, if A is equal to B, you should print &#34;YES&#34;, or print &#34;NO&#34;.  &amp;nbsp;  Input  each test case contains two numbers A and B.  &amp;nbsp;  Output  for each case, if A is equal to B, you should print &#34;YES&#34;, or print &#34;NO&#34;.  &amp;nbsp;  Sample Input  1 2 2 2 3 3 4 3</description>
    </item>
    
    <item>
      <title>hdoj2002解题报告</title>
      <link>https://imxqd.xyz/index.php/2014/01/15/hdoj2002%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Wed, 15 Jan 2014 04:29:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2014/01/15/hdoj2002%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>Problem Description  根据输入的半径&amp;#20540;，计算球的体积。  &amp;nbsp;  Input  输入数据有多组，每组占一行，每行包括一个实数，表示球的半径。  &amp;nbsp;  Output  输出对应的球的体积，对于每组输入数据，输出一行，计算结果保留三位小数。  #include  int main() { const double PI = 3.1415927; double r; while (scanf(&#34;%lf&#34;, &amp;r) != EOF) { double v = 4 * PI * r * r * r / 3; printf(&#34;%.3lfn&#34;, v); } return 0; }   </description>
    </item>
    
    <item>
      <title>hdoj2001解题报告</title>
      <link>https://imxqd.xyz/index.php/2014/01/15/hdoj2001%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Wed, 15 Jan 2014 04:19:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2014/01/15/hdoj2001%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>Problem Description  输入两点坐标（X1,Y1）,（X2,Y2）,计算并输出两点间的距离。  &amp;nbsp;  Input  输入数据有多组，每组占一行，由4个实数组成，分别表示x1,y1,x2,y2,数据之间用空&amp;#26684;隔开。  &amp;nbsp;  Output  对于每组输入数据，输出一行，结果保留两位小数。  #include  #include  int main() { double a, b, x, y; while (scanf(&#34;%lf %lf %lf %lf&#34;, &amp;a, &amp;b, &amp;x, &amp;y) != EOF) { double l = sqrt((a - x) * (a - x) + (b - y) * (b - y)); printf(&#34;%.2lfn&#34;, l); } return 0; }   </description>
    </item>
    
    <item>
      <title>hdoj1002解题报告</title>
      <link>https://imxqd.xyz/index.php/2014/01/15/hdoj1002%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Wed, 15 Jan 2014 04:10:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2014/01/15/hdoj1002%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>题意:两个大数相加,按要求输出 代码如下:(未通过,但自己觉得算法正确,自测数据正常) #include  #include  using namespace std; int main() { int t; cin  t; for (int m = 1; m  a  b; char ta[1000] = { 0 }, tb[1000] = { 0 }, sum[1001] = { 0 }; int la = strlen(a); int lb = strlen(b); for (int i = la - 1, j = 999; i = 0; i--, j--) ta[j] = a[i] - &#39;0&#39;; //复制并对齐到最后并转换成数字,方便计算 for (int i = lb - 1, j = 999; i = 0; i--, j--) tb[j] = b[i] - &#39;0&#39;; //同上 int pos = 0; int i = 999; do { int tmp = ta[i] + tb[i] + pos; pos = tmp / 10; sum[i + 1] = tmp % 10 + &#39;0&#39;; i--; } while (ta[i + 1] !</description>
    </item>
    
    <item>
      <title>hdoj1049解题报告</title>
      <link>https://imxqd.xyz/index.php/2014/01/13/hdoj1049%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Sun, 12 Jan 2014 23:18:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2014/01/13/hdoj1049%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>题意:1个长1英寸的虫子要从高n英寸的洞里爬出来,每分钟爬u英寸,但每爬一分钟需要休息一分钟,它会下滑d英寸,问它多长时间爬出来
分析:相当于每两分钟爬u &amp;#8211; d英寸, 但最后一次是直接爬上去的,不会下滑,这是一种方法,我用的是直接模拟这个过程的方法.
代码如下:
#include  using namespace std; int main() { int n, u, d; while (cin  n  u  d) { if (n == 0)break; int t; int l = 0; for (t = 1; l </description>
    </item>
    
    <item>
      <title>hdoj1008解题报告</title>
      <link>https://imxqd.xyz/index.php/2013/12/22/hdoj1008%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Sat, 21 Dec 2013 21:25:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2013/12/22/hdoj1008%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>题意:
坐电梯,上一层楼需要6秒,下一层楼需要4秒,在每一层会停留5秒,电梯开始在0层,输入要去的各个层,输出所需要的时间
#include  using namespace std; int main() { int n; int step[101] = {0}; while (true) { cin  n; if (!n)break; int time = 0; step[0] = 0; for (int i = 1; i  step[i]; for (int i = 1; i step[i - 1]) { time += 6 \* (step[i] - step[i - 1]); } else { time += 4 \* (step[i - 1] - step[i]); } } time += n * 5; cout </description>
    </item>
    
    <item>
      <title>hdoj1005解题报告</title>
      <link>https://imxqd.xyz/index.php/2013/12/22/hdoj1005%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Sat, 21 Dec 2013 21:21:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2013/12/22/hdoj1005%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>题意:
f(1) = 1, f(2) = 1,&amp;nbsp;
f(n) = (A * f(n &amp;#8211; 1) &amp;#43; B * f(n &amp;#8211; 2)) mod 7.
输入A,B和n,输出f(n);
#include  using namespace std; int main() { int f[1010]; int A, B; int64_t n; while (cin) { f[1] = 1, f[2] = 1; cin &amp;gt;&amp;gt; A &amp;gt;&amp;gt; B &amp;gt;&amp;gt; n; if ( A == 0 &amp;amp;&amp;amp; B == 0 &amp;amp;&amp;amp; n == 0)break; int i; for (i = 3; i &amp;lt;= n; i++) { f[i] = (A * f[i - 1] + B * f[i - 2]) % 7; for(int j=2;j</description>
    </item>
    
    <item>
      <title>hdoj1004解题报告</title>
      <link>https://imxqd.xyz/index.php/2013/12/22/hdoj1004%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Sat, 21 Dec 2013 21:17:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2013/12/22/hdoj1004%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>题意:输入各种颜色的气球,输出气球数量最多的气球的颜色
#include  #include  using namespace std; int main() { int n; char ball\[1001\]\[40\]; while (true) { cin  n; if (n == 0)break; int count[1001] = {0}; for (int i = 0; i  ball[i]; } for (int i = 0; i max) { max = count[i]; pos = i; } } cout </description>
    </item>
    
    <item>
      <title>hdoj1000解题报告</title>
      <link>https://imxqd.xyz/index.php/2013/12/22/hdoj1000%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Sat, 21 Dec 2013 21:13:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2013/12/22/hdoj1000%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>题意:计算A+B  #include  int main() { int a, b; while (scanf(&#34;%d%d&#34;, &amp;a, &amp;b) != EOF) { printf(&#34;%dn&#34;, a + b); } } </description>
    </item>
    
    <item>
      <title>hdoj1001解题报告</title>
      <link>https://imxqd.xyz/index.php/2013/12/22/hdoj1001%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Sat, 21 Dec 2013 21:08:00 +0000</pubDate>
      
      <guid>https://imxqd.xyz/index.php/2013/12/22/hdoj1001%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>第一次写解题报告,找了个最简单的.
题意:输入一个数n,输出从1&amp;#43;2&amp;#43;3&amp;#43;&amp;#8230;&amp;#43;n.
没什么好说的
#include  int main() { int n; while (scanf(&#34;%d&#34;, &amp;n) != EOF) { int sum = 0; for (int i = 1; i </description>
    </item>
    
  </channel>
</rss>